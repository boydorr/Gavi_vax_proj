bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
# Madagascar
pep <- 8900 # 85/100,000
vpp_SQ_ID <- 0.4 + 0.4*(1-dropout) + 0.4*(1-dropout)*(1-dropout) # vials per patient SQ
bites <- pep/vpp_SQ_ID
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
pep <- 85*30325000/100000 # 85/100,000
bites <- pep/vpp_SQ_ID
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
# 88k
pep <- 8900 # 85/100,000
vpp_SQ_ID <- 0.4 + 0.4*(1-dropout) + 0.4*(1-dropout)*(1-dropout) # vials per patient SQ
bites <- pep/vpp_SQ_ID
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
# Tanzania
pep <- 30000
urban <- 0.4
buffer <- 0.2
dropout <- 0.3
complete_urban <- 0.67
complete_rural <- 2.2
incomplete_urban <- 0.45
incomplete_rural <- 1.47
vpp_SQ <- 1 + 1*(1-dropout) + 1*(1-dropout)*(1-dropout) # vials per patient SQ
vpp_SQ_ID <- 0.4 + 0.4*(1-dropout) + 0.4*(1-dropout)*(1-dropout) # vials per patient SQ
bites <- pep/vpp_SQ
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
bites <- pep/vpp_SQ_ID
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
# Gavi back calculations
# Tanzania
pep <- 30000
urban <- 0.4
buffer <- 0.2
dropout <- 0.3
complete_urban <- 0.67
complete_rural <- 2.2
incomplete_urban <- 0.45
incomplete_rural <- 1.47
vpp_SQ <- 1 + 1*(1-dropout) + 1*(1-dropout)*(1-dropout) # vials per patient SQ
vpp_SQ_ID <- 0.4 + 0.4*(1-dropout) + 0.4*(1-dropout)*(1-dropout) # vials per patient SQ
bites <- pep/vpp_SQ
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)*1.2
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)* 1.5
(1-dropout)*(1-dropout)
# Mael's method
doses = (pep + pep*(1-dropout) + pep*(1-dropout)*(1-dropout))*0.2
waste = (doses * urban * 0.107) + (doses * (1-urban) * 0.73)
(doses + waste) * 1.5
# Assuming PEP population
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)* 1.5
(doses * urban * 0.107)
(doses * urban * 0.107)
2000000*.01
2000000*.01*.38
pep + pep*(1-dropout) + pep*(1-dropout)*(1-dropout))
pep + pep*(1-dropout) + pep*(1-dropout)*(1-dropout)
doses = (pep + pep*(1-dropout) + pep*(1-dropout)*(1-dropout)) * .2
doses
(doses * urban * 0.107)
doses * urban
(doses * urban * 0.107)
(doses * (1-urban) * 0.73)
doses * (1-urban)
doses = (pep + pep*(1-dropout) + pep*(1-dropout)*(1-dropout)) * .2
waste = (doses * urban * 0.107) + (doses * (1-urban) * 0.73)
doses + waste
(doses + waste) * 1.5
(pep * urban * dropout * incomplete_urban)
doses + waste
pep * urban * dropout
incomplete_urban
(pep * urban * dropout * incomplete_urban)
pep * urban * dropout
incomplete_urban
(pep * urban * dropout * incomplete_urban)
(pep * urban * (1-dropout) * complete_urban)
(pep * (1-urban) * dropout * incomplete_rural) +
()
(pep * (1-urban) * dropout * incomplete_rural)
(pep * (1-urban) * (1-dropout) * complete_rural)
(1-urban)
(1-dropout)
complete_rural
(pep * (1-urban) * (1-dropout) * complete_rural)
(pep * urban * dropout * incomplete_urban) +
(pep * urban * (1-dropout) * complete_urban) +
(pep * (1-urban) * dropout * incomplete_rural) +
(pep * (1-urban) * (1-dropout) * complete_rural)
(pep * urban * dropout * incomplete_urban) +
(pep * urban * (1-dropout) * complete_urban) +
(pep * (1-urban) * dropout * incomplete_rural) +
(pep * (1-urban) * (1-dropout) * complete_rural)
* 1.5
(pep + pep*(1-dropout) + pep*(1-dropout)*(1-dropout))
doses * urban
(doses * urban * 0.67) + (doses * (1-urban) * 2.2)
(doses * urban * 0.67) + (doses * (1-urban) * 2.2)
(pep + pep*(1-dropout) + pep*(1-dropout)*(1-dropout))
(doses * urban)
(doses * (1-urban))
doses
doses = (pep + pep*(1-dropout) + pep*(1-dropout)*(1-dropout))
doses
(doses * urban)
(doses * (1-urban))
(doses * urban) * 0.2
(doses * urban) * 0.2 * 1.07
(doses * (1-urban)) * 0.2 * 3.7
((doses * urban) * 0.2 * 1.07) + ((doses * (1-urban)) * 0.2 * 3.7)
((doses * urban) * 0.2 * 1.07) + ((doses * (1-urban)) * 0.2 * 3.7)
* 1.5
((doses * urban) * 0.2 * 1.07) + ((doses * (1-urban)) * 0.2 * 3.7) * 1.5
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)* 1.5
(pep*(1-dropout)*(1-dropout)))
(pep*2*(1-dropout))
1-dropout
(pep*(1-dropout)3*)
(pep*(1-dropout))
dropout
(1-dropout)*(1-dropout)
(pep*(1-dropout)*(1-dropout))
pep +
(pep*(1-dropout)) +
(pep*(1-dropout)*(1-dropout))
doses = pep +
(pep*(1-dropout)) +
(pep*(1-dropout)*(1-dropout))
doses * 2.2
doses * complete_rural
doses * complete_rural * (1-urban)
doses * complete_rural * (1-urban)
doses * complete_urban * urban
doses
doses
doses * 0.2 * complete_rural * (1-urban)
doses * 0.2 * complete_urban * urban
complete_rural
0.6/2.2
2.2/0.6
(doses * 0.2 * complete_rural * (1-urban)) * 3.7
0.67/.6
(doses * 0.2 * complete_rural * (1-urban)) * 3.7
(doses * 0.2 * complete_urban * urban) * 1.116
complete_rural
(doses * 0.2 * (1-urban))
(doses * (1-urban))
(doses * (1-urban)) 0.2 * 3.7
0.2 * 3.7
(doses * (1-urban)) * 0.2 * 3 * 3.7
(doses * (1-urban))
(doses * (1-urban)) * 0.2
0.2 * 3.7
(doses * (1-urban))
(doses * (1-urban)) * 0.2 * 3.7
(doses * urban)
(doses * urban) * 0.2 * 1.116
((doses * (1-urban)) * 0.2 * 3.7) +
((doses * urban) * 0.2 * 1.116)
(((doses * (1-urban)) * 0.2 * 3.7) +
((doses * urban) * 0.2 * 1.116)) * 1.5
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)* 1.5
WF_urban = 6.7/0.6
WF_rural = 2.2/0.6
((doses * (1-urban)) * WF_rural * dose_vol) +
(doses * urban * WF_urban * dose_vol)
WF_urban = 6.7/0.6
WF_rural = 2.2/0.6
dose_vol = 0.2
((doses * (1-urban)) * WF_rural * dose_vol) +
(doses * urban * WF_urban * dose_vol)
WF_urban = 0.67/0.6
WF_rural = 2.2/0.6
dose_vol = 0.2
((doses * (1-urban)) * WF_rural * dose_vol) +
(doses * urban * WF_urban * dose_vol)
((doses * (1-urban) * WF_rural * dose_vol) + (doses * urban * WF_urban * dose_vol)) * buffer
doses = pep +
(pep*(1-dropout)) +
(pep*(1-dropout)*(1-dropout))
WF_urban = 0.67/0.6
WF_rural = 2.2/0.6
dose_vol = 0.2
buffer = 1.5
((doses * (1-urban) * WF_rural * dose_vol) +
(doses * urban * WF_urban * dose_vol)) * buffer
30000*(1-0.3)
30000*(1-0.3)*(1-0.3)
30000+21000+14700
65700*.2
0.67/0.6
2.2/.6
# Gavi back calculations
# Tanzania
pep <- 30000
urban <- 0.4
buffer <- 0.2
dropout <- 0.3
complete_urban <- 0.67
complete_rural <- 2.2
incomplete_urban <- 0.45
incomplete_rural <- 1.47
vpp_SQ <- 1 + 1*(1-dropout) + 1*(1-dropout)*(1-dropout) # vials per patient SQ
vpp_SQ_ID <- 0.4 + 0.4*(1-dropout) + 0.4*(1-dropout)*(1-dropout) # vials per patient SQ
bites <- pep/vpp_SQ
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
# 23500
bites <- pep/vpp_SQ_ID
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
# 60k
# Assuming PEP population
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)* 1.5
# Mael's method
doses = pep +
(pep*(1-dropout)) +
(pep*(1-dropout)*(1-dropout))
WF_urban = 0.67/0.6
WF_rural = 2.2/0.6
dose_vol = 0.2
buffer = 1.5
((doses * (1-urban) * WF_rural * dose_vol)
)
(doses * urban * WF_urban * dose_vol)
WF_urban = 0.67/0.6
WF_rural = 2.2/0.6
dose_vol = 0.2
buffer = 1.5
((doses * (1-urban) * WF_rural * dose_vol) +
(doses * urban * WF_urban * dose_vol)) * buffer
# Assuming PEP population
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)* 1.5
(urban * dropout) + ((1-urban)*dropout) + (urban* (1-dropout)) + ((1-urban)*(1-dropout))
(urban * dropout*.45) + ((1-urban)*dropout*1.45) + (urban* (1-dropout)*.67) + ((1-urban)*(1-dropout)*2.2)
(urban * dropout*.45) + ((1-urban)*dropout*1.45) + (urban* (1-dropout)*.67) + ((1-urban)*(1-dropout)*2.2)*30000
(urban * dropout*.45) + ((1-urban)*dropout*1.45) + (urban* (1-dropout)*.67) + ((1-urban)*(1-dropout)*2.2)
30000*1.4266
30000*1.4266*.15
30000*1.4266*1.5
65700+32939
(65700+32939)/0.2
2000000/200
10000/52
10000/40
10000/30
# Tanzania
pep <- 30000
urban <- 0.4
buffer <- 0.2
dropout <- 0.3
complete_urban <- 0.67
complete_rural <- 2.2
incomplete_urban <- 0.45
incomplete_rural <- 1.47
vpp_SQ <- 1 + 1*(1-dropout) + 1*(1-dropout)*(1-dropout) # vials per patient SQ
vpp_SQ_ID <- 0.4 + 0.4*(1-dropout) + 0.4*(1-dropout)*(1-dropout) # vials per patient SQ
bites <- pep/vpp_SQ
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
# 23500
bite
bites
bites <- pep/vpp_SQ_ID
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
# 60k
# Assuming PEP population
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)* 1.5
# Mael's method
doses = pep +
(pep*(1-dropout)) +
(pep*(1-dropout)*(1-dropout))
WF_urban = 0.67/0.6
WF_rural = 2.2/0.6
dose_vol = 0.2
buffer = 1.5
((doses * (1-urban) * WF_rural * dose_vol) +
(doses * urban * WF_urban * dose_vol)) * buffer
bites <- pep/vpp_SQ_ID
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
# 60k
# Assuming PEP population
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)* 1.5
doses = pep +
(pep*(1-dropout)) +
(pep*(1-dropout)*(1-dropout))
doses
WF_urban = 0.67/0.6
WF_rural = 2.2/0.6
dose_vol = 0.2
buffer = 1.5
((doses * (1-urban) * WF_rural * dose_vol) +
(doses * urban * WF_urban * dose_vol)) * buffer
(pep * urban * dropout * incomplete_urban) +
(pep * urban * (1-dropout) * complete_urban) +
(pep * (1-urban) * dropout * incomplete_rural) +
(pep * (1-urban) * (1-dropout) * complete_rural)
* 1.5
947/148
171/148
67/947
343/148
947/343
114/67
67/21
947/118
400000/171000000
400000*100000/171000000
1000*10
10000*100/2000000
2.5/12
50*5
250*5
250*20
250 * 5
250 * 3
250 * 5
250 * 5 *3
3500/45
(50*5 *5)*3
3*5*3
3*5*3*50
3*5*3*50/10
library(tidyverse)
source("R/HelperFun.R")
library(tidyverse)
source("R/HelperFun.R")
#  DATA
df <- read_csv("output/pop_proj2024_2040.csv")
endemic <- df %>%
filter(endemic == 1)
vials <- read_csv("data/vaccine_use.csv")
ipc <- subset(vials, regimen == "IPC")
V_low_com <- subset(ipc, completeness =="Complete" & Setting == "rural")$vial
V_high_com <- subset(ipc, completeness =="Complete" & Setting == "urban")$vial
V_low_incom <- subset(ipc, completeness =="Incomplete" & Setting == "rural")$vial
V_high_incom <- subset(ipc, completeness =="Incomplete" & Setting == "urban")$vial
V_low_com
yrs <- 2024:2040 # y for projection
intro_y <- which(yrs == 2025) # date of intro
pseek_cap <- 0.95
pcomplete_cap <- 0.9
step <- 0.1
inc <- 0.03
gavi_fun(j-1, df$HDI[i], step = step, inc = inc, cap_p = pcomplete_cap)
Pseek_rabid <- Pseek_healthy <- Pcomplete <- rep(NA, length(yrs))
proj_bite_patients <- proj_rabid <- proj_healthy <- proj_vials <- matrix(NA, ncol = length(yrs), nrow = nrow(df))
for(i in 1:nrow(df)){
# set baseline probabilities based on if PEP is free/ charged for
if(df$free[i] == TRUE){
Pseek_rabid_base =  df$HDI[i]^(1/2)
Pseek_health_base = df$HDI[i]^(1/5)
} else {
Pseek_rabid_base =  sqrt(df$HDI[i])
Pseek_health_base = sqrt(df$HDI[i])
}
# create projections
for(j in 1: length(yrs)){
# vector of probabilities assuming Gavi support from 2025
Pseek_rabid[j] <- gavi_fun(j-1, Pseek_rabid_base, step = step, inc = inc, cap_p = pseek_cap)
Pseek_healthy[j] <- gavi_fun(j-1, Pseek_health_base, step = step, inc = inc, cap_p = pseek_cap)
Pcomplete[j] <- gavi_fun(j-1, df$HDI[i]^(1/2), step = step, inc = inc, cap_p = pcomplete_cap)
# rabid bites, healthy bites and bite patients
yi <- grep(yrs[j], names(df))
bites_res <- CalcBites(BI = 0.01, pop = df[i, yi], hdr = df$hdr_rel[i], HDI = df$HDI[i],
Pseek_R = Pseek_rabid[j],
Pseek_H = Pseek_healthy[j])
# store projections
proj_bite_patients[i,j] <- unlist(bites_res$patients)
proj_rabid[i,j] <- unlist(bites_res$rabid)
proj_healthy[i,j] <- unlist(bites_res$healthy)
proj_vials[i,j] <- VialCalc2(unlist(bites_res$patients), df$HDI[i],  Pcomplete[j],
vials_low_complete = V_low_com,
vials_high_complete = V_high_com,
vials_low_incomplete = V_low_incom,
vials_high_incomplete = V_low_incom)
}
print(i)
}
proj_vials <- proj_vials %>% data.frame() %>% setNames(yrs)
proj_bite_patients <- proj_bite_patients %>% data.frame() %>% setNames(yrs)
proj_rabid <- proj_rabid %>% data.frame() %>% setNames(yrs)
proj_vials$code <- df$CODE
proj_vials$country <- df$country
proj_bite_patients$code <- df$CODE
proj_bite_patients$country <- df$country
proj_rabid$code <- df$CODE
proj_rabid$country <- df$country
head(proj_bite_patients)
proj_bite_patients$2025[which(proj_bite_patients$country == "Tanzania")]
which(proj_bite_patients$country == "Tanzania")
proj_bite_patients[which(proj_bite_patients$country == "Tanzania"),]
proj_bite_patients[which(proj_bite_patients$country == "Tanzania"),"2025"]
proj_bite_patients[which(proj_bite_patients$country == "Madagascar"),"2025"]
proj_vials[which(proj_bite_patients$country == "Madagascar"),"2025"]
proj_vials[which(proj_bite_patients$country == "Tanzania"),"2025"]
proj_rabid[which(proj_bite_patients$country == "Tanzania"),"2025"]
# Tanzania
pep <- 30000
urban <- 0.4
buffer <- 0.2
dropout <- 0.3
complete_urban <- 0.67
complete_rural <- 2.2
incomplete_urban <- 0.45
incomplete_rural <- 1.47
vpp_SQ <- 1 + 1*(1-dropout) + 1*(1-dropout)*(1-dropout) # vials per patient SQ
vpp_SQ_ID <- 0.4 + 0.4*(1-dropout) + 0.4*(1-dropout)*(1-dropout) # vials per patient SQ
bites <- pep/vpp_SQ
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.2
# 23500
(bites * urban * dropout * incomplete_urban +
bites * (1-urban) * dropout * incomplete_rural +
bites * urban * (1-dropout) * complete_urban +
bites * (1-urban) * (1-dropout) * complete_rural)*1.5
complete_rural
bites
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)* 1.5
pep * urban * dropout * incomplete_urban
incomplete_urban
(pep * urban * dropout * incomplete_urban +
pep * (1-urban) * dropout * incomplete_rural +
pep * urban * (1-dropout) * complete_urban +
pep * (1-urban) * (1-dropout) * complete_rural)* 1.5
doses = pep +
(pep*(1-dropout)) +
(pep*(1-dropout)*(1-dropout))
WF_urban = 0.67/0.6
WF_rural = 2.2/0.6
dose_vol = 0.2
buffer = 1.5
((doses * (1-urban) * WF_rural * dose_vol) +
(doses * urban * WF_urban * dose_vol)) * buffer
doses
doses_calc <- function(pep_pop, DOR){ # pop population & drop out rate
pep_pop + (pep_pop*(1-DOR)) + (pep_pop*(1-DOR)*(1-DOR))
}
doses_calc(30000, 0.3)
doses_calc(30000, 0.2)
doses_calc(30000, 0.1)
120/30
10*3
10*3
30*5
30*3
40*3
